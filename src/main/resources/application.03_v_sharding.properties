
spring.shardingsphere.datasource.names=ds1,ds2,fds1

# 一個實體類 對應兩張表, 覆蓋
spring.main.allow-bean-definition-overriding=true

# first: ds1
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3311/todolist?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=111111

# second: ds2
spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://localhost:3312/todolist?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=111111

# third: fds1 (filelist data source: 1)
spring.shardingsphere.datasource.fds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.fds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.fds1.url=jdbc:mysql://localhost:3311/filelist?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.fds1.username=root
spring.shardingsphere.datasource.fds1.password=111111


# 指定 fds1.t_user 表分布的情况，配置表在哪个数据库里
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=fds$->{1}.t_user

# for t_user, 以下可以不設定! 但就要自己指定 user_id
# 指定 fds1.t_user 表里面主键 user_id 的生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
#
## for t_user, 以下可以不設定!?!?!? 因為沒分表啊
## 配置分表策略    因為只有一個表，所以 user_id 如以下簡單設定即可
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user









# 指定 course 表分布的情况，配置表在哪个数据库里，表的名称都是什么
spring.shardingsphere.sharding.tables.course.actual-data-nodes=ds$->{1..2}.course_$->{1..2}

# 指定 course 表里面主键 cid 的生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 配置分表策略    约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2 表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}


# 指定分库策略    约定 user_id 值偶数添加到 m1 库，如果 user_id 是奇数添加到 m2 库
# 默认写法（所有的表的user_id）
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=m$->{user_id % 2 + 1}
# 指定只有course表的user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=ds$->{user_id % 2 + 1}




# 打开 sql 输出日志
spring.shardingsphere.props.sql.show=true