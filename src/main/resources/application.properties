## app
todo-task.content.preview-length=${TODO_TASK_CONTENT_PREVIEW_LENGTH:20}
todo-task.min=${TODO_TASK_MIN:10}
todo-task.max=${TODO_TASK_MAX:50}
todo-task.count=${TODO_TASK_COUNT:task-count}
todo-task.first-timestamp=${TODO_TASK_FIRST_TIMESTAMP:task-first-timestamp}
todo-task.last-timestamp=${TODO_TASK_LAST_TIMESTAMP:task-last-timestamp}


# app: multipart
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=${FAIL_ON_EMPTY_BEANS:false}
multipart.enabled=${MULTIPART_ENABLED:true}
spring.http.multipart.max-file-size=${MULTIPART_MAX_FILE_SIZE:10M}
spring.http.multipart.max-request-size=${MULTIPART_MAX_REQUEST_SIZE:10M}


## data source master N >> dsmN; data source slave K >> dssK;
spring.shardingsphere.datasource.names=${SHARDING_DATASOURCE_NAMES:dsm1,dsm2}

# 一個實體類 對應兩張表, 覆蓋???
spring.main.allow-bean-definition-overriding=${SHARDING_BEAN_DEFINITION_OVERRIDING}

# 1st master
spring.shardingsphere.datasource.dsm1.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm1.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm1.url=${SHARDING_DATASOURCE_M1_URL}
spring.shardingsphere.datasource.dsm1.username=${SHARDING_DATASOURCE_M1_USERNAME}
spring.shardingsphere.datasource.dsm1.password=${SHARDING_DATASOURCE_M1_PASSWORD}

# 2nd master
spring.shardingsphere.datasource.dsm2.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm2.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm2.url=${SHARDING_DATASOURCE_M2_URL}
spring.shardingsphere.datasource.dsm2.username=${SHARDING_DATASOURCE_M2_USERNAME}
spring.shardingsphere.datasource.dsm2.password=${SHARDING_DATASOURCE_M2_PASSWORD}

# 3rd master
spring.shardingsphere.datasource.dsm3.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm3.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm3.url=${SHARDING_DATASOURCE_M3_URL}
spring.shardingsphere.datasource.dsm3.username=${SHARDING_DATASOURCE_M3_USERNAME}
spring.shardingsphere.datasource.dsm3.password=${SHARDING_DATASOURCE_M3_PASSWORD}

# 4th master
spring.shardingsphere.datasource.dsm4.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm4.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm4.url=${SHARDING_DATASOURCE_M4_URL}
spring.shardingsphere.datasource.dsm4.username=${SHARDING_DATASOURCE_M4_USERNAME}
spring.shardingsphere.datasource.dsm4.password=${SHARDING_DATASOURCE_M4_PASSWORD}

# 5th master
spring.shardingsphere.datasource.dsm5.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm5.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm5.url=${SHARDING_DATASOURCE_M5_URL}
spring.shardingsphere.datasource.dsm5.username=${SHARDING_DATASOURCE_M5_USERNAME}
spring.shardingsphere.datasource.dsm5.password=${SHARDING_DATASOURCE_M5_PASSWORD}

# 6th master
spring.shardingsphere.datasource.dsm6.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm6.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm6.url=${SHARDING_DATASOURCE_M6_URL}
spring.shardingsphere.datasource.dsm6.username=${SHARDING_DATASOURCE_M6_USERNAME}
spring.shardingsphere.datasource.dsm6.password=${SHARDING_DATASOURCE_M6_PASSWORD}

# 7th master
spring.shardingsphere.datasource.dsm7.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm7.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm7.url=${SHARDING_DATASOURCE_M7_URL}
spring.shardingsphere.datasource.dsm7.username=${SHARDING_DATASOURCE_M7_USERNAME}
spring.shardingsphere.datasource.dsm7.password=${SHARDING_DATASOURCE_M7_PASSWORD}

# 8th master
spring.shardingsphere.datasource.dsm8.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm8.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm8.url=${SHARDING_DATASOURCE_M8_URL}
spring.shardingsphere.datasource.dsm8.username=${SHARDING_DATASOURCE_M8_USERNAME}
spring.shardingsphere.datasource.dsm8.password=${SHARDING_DATASOURCE_M8_PASSWORD}

# 9th master
spring.shardingsphere.datasource.dsm9.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm9.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm9.url=${SHARDING_DATASOURCE_M9_URL}
spring.shardingsphere.datasource.dsm9.username=${SHARDING_DATASOURCE_M9_USERNAME}
spring.shardingsphere.datasource.dsm9.password=${SHARDING_DATASOURCE_M9_PASSWORD}

# 10th master
spring.shardingsphere.datasource.dsm10.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm10.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm10.url=${SHARDING_DATASOURCE_M10_URL}
spring.shardingsphere.datasource.dsm10.username=${SHARDING_DATASOURCE_M10_USERNAME}
spring.shardingsphere.datasource.dsm10.password=${SHARDING_DATASOURCE_M10_PASSWORD}

# 11th master
spring.shardingsphere.datasource.dsm11.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm11.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm11.url=${SHARDING_DATASOURCE_M11_URL}
spring.shardingsphere.datasource.dsm11.username=${SHARDING_DATASOURCE_M11_USERNAME}
spring.shardingsphere.datasource.dsm11.password=${SHARDING_DATASOURCE_M11_PASSWORD}

# 12th master
spring.shardingsphere.datasource.dsm12.type=${SHARDING_DATASOURCE_TYPE}
spring.shardingsphere.datasource.dsm12.driver-class-name=${SHARDING_DATASOURCE_DRIVER_CLASS_NAME}
spring.shardingsphere.datasource.dsm12.url=${SHARDING_DATASOURCE_M12_URL}
spring.shardingsphere.datasource.dsm12.username=${SHARDING_DATASOURCE_M12_USERNAME}
spring.shardingsphere.datasource.dsm12.password=${SHARDING_DATASOURCE_M12_PASSWORD}

## todo_task
# 指定 table: todo_task 分布的情况，配置 todo_task 的資料分布範圍 >> sharding range to partition range
spring.shardingsphere.sharding.tables.todo_task.actual-data-nodes=dsm$->{1..${SHARDING_DB_AMOUNT_FOR_TODO_TASK}}.todo_task_$->{1..${SHARDING_TABLE_AMOUNT_FOR_TODO_TASK}}

# 指定 table: todo_task 裡面主鍵 cid 的生成策略 >> SNOWFLAKE
spring.shardingsphere.sharding.tables.todo_task.key-generator.column=tid
spring.shardingsphere.sharding.tables.todo_task.key-generator.type=SNOWFLAKE


# todo_task partition strategy
spring.shardingsphere.sharding.tables.todo_task.table-strategy.standard.sharding-column=week_of_year
spring.shardingsphere.sharding.tables.todo_task.table-strategy.standard.precise-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.IntegerNumPreciseAlgorithm
#spring.shardingsphere.sharding.tables.todo_task.table-strategy.standard.range-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.?? (no range query)
## Deprecated inline process
#spring.shardingsphere.sharding.tables.todo_task.table-strategy.inline.sharding-column=week_of_year
#spring.shardingsphere.sharding.tables.todo_task.table-strategy.inline.algorithm-expression=todo_task_$->{week_of_year % ${SHARDING_TABLE_AMOUNT_FOR_TODO_TASK} + 1}


# todo_task sharding strategy 指定 todo_task 的 tid (不一定要是 PK, 但實現上通常是 PK)
spring.shardingsphere.sharding.tables.todo_task.database-strategy.standard.sharding-column=tid
spring.shardingsphere.sharding.tables.todo_task.database-strategy.standard.precise-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.LongNumPreciseAlgorithm
spring.shardingsphere.sharding.tables.todo_task.database-strategy.standard.range-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.TodoTaskRangeAlgorithm
## Deprecated inline process
#spring.shardingsphere.sharding.tables.todo_task.database-strategy.inline.sharding-column=tid
#spring.shardingsphere.sharding.tables.todo_task.database-strategy.inline.algorithm-expression=dsm$->{tid % ${SHARDING_DB_AMOUNT_FOR_TODO_TASK} + 1}




## todo_list
# 指定 table: todo_list 分布的情况，配置 todo_list 的資料分布範圍 >> sharding range to partition range
spring.shardingsphere.sharding.tables.todo_list.actual-data-nodes=dsm$->{1..${SHARDING_DB_AMOUNT_FOR_TODO_LIST}}.todo_list_$->{1..${SHARDING_TABLE_AMOUNT_FOR_TODO_LIST}}

### 由 todo_task.tid 替代 (除非用 SNOWFLAKE, 否則這裡不需要設定)
#spring.shardingsphere.sharding.tables.todo_list.key-generator.column=tid
#spring.shardingsphere.sharding.tables.todo_list.key-generator.type=XXX


# todo_list partition strategy
spring.shardingsphere.sharding.tables.todo_list.table-strategy.standard.sharding-column=first_week_of_year
spring.shardingsphere.sharding.tables.todo_list.table-strategy.standard.precise-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.IntegerNumPreciseAlgorithm
#spring.shardingsphere.sharding.tables.todo_list.table-strategy.standard.range-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.?? (no range query)
## Deprecated inline process
#spring.shardingsphere.sharding.tables.todo_list.table-strategy.inline.sharding-column=first_week_of_year
#spring.shardingsphere.sharding.tables.todo_list.table-strategy.inline.algorithm-expression=todo_list_$->{first_week_of_year % ${SHARDING_TABLE_AMOUNT_FOR_TODO_LIST} + 1}


# todo_list sharding strategy 指定 todo_list 的 first_month (不一定要是 PK)
spring.shardingsphere.sharding.tables.todo_list.database-strategy.standard.sharding-column=first_month
spring.shardingsphere.sharding.tables.todo_list.database-strategy.standard.precise-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.IntegerNumPreciseAlgorithm
#spring.shardingsphere.sharding.tables.todo_list.database-strategy.standard.range-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.?? (no range query)
## Deprecated inline process
#spring.shardingsphere.sharding.tables.todo_list.database-strategy.inline.sharding-column=first_month
#spring.shardingsphere.sharding.tables.todo_list.database-strategy.inline.algorithm-expression=dsm$->{first_month % ${SHARDING_DB_AMOUNT_FOR_TODO_LIST} + 1}



## attachment
# 指定 table: attachment 分布的情况，配置 attachment 的資料分布範圍 >> sharding range to partition range
spring.shardingsphere.sharding.tables.attachment.actual-data-nodes=dsm$->{1..${SHARDING_DB_AMOUNT_FOR_ATTACHMENT}}.attachment_$->{1..${SHARDING_TABLE_AMOUNT_FOR_ATTACHMENT}}


# partition strategy
# 指定 table: attachment 裡面 aid(hashcode) 的生成策略 >> PartitionHashcodePreciseAlgorithm
spring.shardingsphere.sharding.tables.attachment.table-strategy.standard.sharding-column=aid
spring.shardingsphere.sharding.tables.attachment.table-strategy.standard.precise-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.PartitionHashcodePreciseAlgorithm


# sharding strategy 指定 attachment 的 aid (不一定要是 PK, 但實現上通常是 PK)
# 指定 table: attachment 裡面主鍵 aid (hashcode) 的生成策略 >> ShardingHashcodePreciseAlgorithm
spring.shardingsphere.sharding.tables.attachment.database-strategy.standard.sharding-column=aid
spring.shardingsphere.sharding.tables.attachment.database-strategy.standard.precise-algorithm-class-name=com.example.todolist.db.rmdb.sharding.algorithm.ShardingHashcodePreciseAlgorithm




# print sql log
spring.shardingsphere.props.sql.show=${SHARDING_SQL_SHOW}

## working thread amount. default: CPU cores
#spring.shardingsphere.props.executor.size=${SHARDING_EXECUTOR_SIZE}




#spring.rabbitmq.addresses=rabbitmq1.betball.com,rabbitmq2.betball.com,rabbitmq3.betball.com

# 版权声明：本文为CSDN博主「苏雨丶」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
# 原文链接：https://blog.csdn.net/qq_38082304/article/details/103049696
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5680}
spring.rabbitmq.username=${RABBITMQ_USERNAME:user}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:1234qwer}
spring.rabbitmq.virtual-host=${RABBITMQ_VIRTUAK_HOST:/}
spring.rabbitmq.listener.simple.concurrency=${RABBITMQ_CONCURRENCY:5}
spring.rabbitmq.listener.simple.max-concurrency=${RABBITMQ_MAX_CONCURRENCY:10}
spring.rabbitmq.listener.simple.acknowledge-mode=${RABBITMQ_ACK_MODE:manual}
spring.rabbitmq.listener.simple.prefetch=${RABBITMQ_PREFETCH:1}
# spring.rabbitmq.connection-timeout=${RABBITMQ_CONNECT_TIMEOUT:600000}
# spring.rabbitmq.publisher-returns=${RABBITMQ_PUBLISHER_RETURNS:true}
# spring.rabbitmq.listener.simple.retry.enabled=${RABBITMQ_RETRY_ENABLED:true}

mq.env=${RABBITMQ_ENV}
mq.attach.queue=${mq.env}.mq.attach.queue
mq.attach.exchange=${mq.env}.mq.attach.exchange
mq.attach.routing.key=${mq.env}.mq.attach.routing.key

mq.transform.queue=${mq.env}.mq.transform.queue
mq.transform.exchange=${mq.env}.mq.transform.exchange
mq.transform.routing.key=${mq.env}.mq.transform.routing.key




## redisson
redisson.host.config=redis://${REDIS_HOST}:${REDIS_PORT}




# google cloud
google.credential.url=${GOOGLE_CREDENTIAL_URL}
google.cloud.storage.key=${GOOGLE_CLOUD_STORAGE_KEY}
google.cloud.storage.bucket=${GOOGLE_CLOUD_STORAGE_BUCKET}
google.cloud.storage.url=${GOOGLE_CLOUD_STORAGE_URL}