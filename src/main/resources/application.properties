# data source master N >> dsmN; data source slave K >> dssK;
spring.shardingsphere.datasource.names=dsm1,dsm2

# 一個實體類 對應兩張表, 覆蓋
spring.main.allow-bean-definition-overriding=true

# first master
spring.shardingsphere.datasource.dsm1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dsm1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.dsm1.url=jdbc:mysql://localhost:3311/todolist?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.dsm1.username=root
spring.shardingsphere.datasource.dsm1.password=111111

# second master
spring.shardingsphere.datasource.dsm2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dsm2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.dsm2.url=jdbc:mysql://localhost:3312/todolist?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.dsm2.username=root
spring.shardingsphere.datasource.dsm2.password=111111


# 指定 table: todo_task 分布的情况，配置 todo_task 的資料分布範圍 >> sharding range to partition range
spring.shardingsphere.sharding.tables.todo_task.actual-data-nodes=dsm$->{1..2}.todo_task_$->{1..2}

# 指定 table: todo_task 裡面主鍵 cid 的生成策略 >> SNOWFLAKE
spring.shardingsphere.sharding.tables.todo_task.key-generator.column=tid
spring.shardingsphere.sharding.tables.todo_task.key-generator.type=SNOWFLAKE


# partition strategy
# 約定 week_of_year 值偶數添加到 todo_task_1，如果 week_of_year 是奇數添加到 todo_task_2
spring.shardingsphere.sharding.tables.todo_task.table-strategy.inline.sharding-column=week_of_year
spring.shardingsphere.sharding.tables.todo_task.table-strategy.inline.algorithm-expression=todo_task_$->{week_of_year % 2 + 1}


# sharding strategy 指定 todo_task 的 tid (不一定要是 PK, 但實現上通常是 PK)
# 約定 tid 值偶數添加到 dsm1 庫，如果 tid 是奇數添加到 dsm2 庫
spring.shardingsphere.sharding.tables.todo_task.database-strategy.inline.sharding-column=tid
spring.shardingsphere.sharding.tables.todo_task.database-strategy.inline.algorithm-expression=dsm$->{tid % 2 + 1}





# print sql log
spring.shardingsphere.props.sql.show=true

## working thread amount. default: CPU cores
#spring.shardingsphere.props.executor.size=

# rabbit mq >  172.25.0.2
#spring.rabbitmq.addresses=rabbitmq1.betball.com,rabbitmq2.betball.com,rabbitmq3.betball.com

# 版权声明：本文为CSDN博主「苏雨丶」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
# 原文链接：https://blog.csdn.net/qq_38082304/article/details/103049696
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5680
spring.rabbitmq.username=user
spring.rabbitmq.password=1234qwer
spring.rabbitmq.virtual-host=/
spring.rabbitmq.listener.simple.concurrency=5
spring.rabbitmq.listener.simple.max-concurrency=10
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.simple.prefetch=1

mq.env=local
mq.basic.queue=${mq.env}.mq.basic.queue
mq.basic.exchange=${mq.env}.mq.basic.exchange
mq.basic.routing.key=${mq.env}.mq.basic.routing.key

#spring.rabbitmq.connection-timeout=600000
#
#spring.rabbitmq.publisher-returns=true
#spring.rabbitmq.listener.simple.acknowledge-mode=manual
#spring.rabbitmq.listener.simple.concurrency=1
#spring.rabbitmq.listener.simple.max-concurrency=1
#spring.rabbitmq.listener.simple.retry.enabled=true

# multipart
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
multipart.enabled=true
spring.http.multipart.max-file-size=10M
spring.http.multipart.max-request-size=10M